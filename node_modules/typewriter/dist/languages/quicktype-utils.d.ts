import { DistinctQuestion } from "inquirer";
import { ConvenienceRenderer, Name, TargetLanguage, Type } from "quicktype-core";
import { SegmentAPI } from "../api";
import { CodeGenerator, FileGenerateResult, GeneratorOptions, LanguageGenerator, QuicktypeTypewriterSettings, TemplateContext } from "./types";
/**
 * This is an override for makeNameForTopLevel for our quicktype language renderers
 */
export declare function makeNameForTopLevelWithPrefixAndSuffix(namer: (t: Type, givenName: string, maybeNamedType: Type | undefined) => Name, typewriterSettings: QuicktypeTypewriterSettings, t: Type, givenName: string, maybeNamedType?: Type): Name;
export interface LanguageMetadata {
    id: string;
    name: string;
    extension: string;
    requiredOptions?: ReadonlyArray<DistinctQuestion>;
    advancedOptions?: ReadonlyArray<DistinctQuestion>;
}
/**
 * Gets the language options from Quicktype and returns a Inquirer Prompt friendly object for use within the wizard of the init command
 * @param language the quicktype language name
 * @param unsupportedOptions (optional) array of quicktype options that are not supported to remove from the options
 * @returns LanguageMetadata object with all data required for a LanguageGenerator
 */
export declare function getLanguageMetadata(language: string, unsupportedOptions?: string[], requiredOptions?: string[]): LanguageMetadata;
/**
 * Calculates the correct indentation level for the generated code from a template file line and an input indentation size
 * @param line template file line
 * @param indentSize indent size on the template file
 * @returns an object containing indentation level and the text to output to the generated code
 */
export declare function calculateLineIndentationLevel(line: string, indentSize?: number): {
    indent: number;
    text: string | null;
};
interface NameModifiers {
    functionName?: (serialized: string) => string;
}
/**
 * Creates a set of code generators from multiple paths to HandleBars templates
 *
 * @param paths paths to Handlebars templates
 * @returns a set of CodeGenerators
 */
export declare function createCodeGeneratorsFromTemplates(context: TemplateContext, nameModifiers?: NameModifiers, ...paths: string[]): CodeGenerator[];
/**
 * Overrides the emitMultiline in a Renderer with an option for variable indent sizes
 * @param renderer Quicktype Renderer
 * @param linesString contents to output
 * @param indentSize indent size in spaces number
 * @returns
 */
export declare function emitMultiline(renderer: ConvenienceRenderer, linesString: string, indentSize?: number): void;
/**
 * Executes all the CodeGenerators in a RenderPlan, for use in a LanguageRenderer
 * @param renderer A QuickType language Renderer
 * @param templatePlan an array of CodeGenerator functions to execute
 * @param nameModifiers Name Modifiers to apply for functions and types
 */
export declare function executeRenderPlan(renderer: ConvenienceRenderer, templatePlan: CodeGenerator[]): void;
/**
 * Returns the language options after filtering unsupported settings and
 * applying default values to missing settings
 * @param options Language Generator options
 * @param defaultValues Map of default values for the options
 * @param unsupportedOptions List of unsupported quicktype options
 * @returns A cleaned map of the settings with default values applied
 */
export declare function cleanOptions(options: GeneratorOptions, defaultValues?: {
    [key: string]: any;
}, unsupportedOptions?: string[]): GeneratorOptions;
/**
 * Generates types using Quicktype. Convenience method for calling quicktype with Segment Rules.
 * @param language Quicktype Language
 * @param rules SegmentAPI Tracking Plan Rules
 * @param options Renderer options
 * @returns A File Map of filename : contents
 */
export declare function generateWithQuicktype(language: string | TargetLanguage, rules: SegmentAPI.RuleMetadata[], options: GeneratorOptions): Promise<FileGenerateResult>;
/**
 * Configuration for createQuicktypeLanguageGenerator.
 * Let's you create easily a new language from Quicktype's generator
 */
interface FactoryConfig<T extends TargetLanguage> {
    /**
     * QuickType Language Name (Must match Quicktype's language name)
     */
    name: string;
    /**
     * QuickType Language Class
     */
    quicktypeLanguage: new (typewriterOptions: QuicktypeTypewriterSettings) => T;
    /**
     * Supported SDKs for the Language to create
     */
    supportedSDKs: {
        /**
         * Unique ID for the SDk
         */
        id: string;
        /**
         * Name of the SDK (User Friendly)
         */
        name: string;
        /**
         * Template path relative to the languages module
         */
        templatePath?: string;
    }[];
    /**
     * Default option values
     */
    defaultOptions?: {
        [key: string]: any;
    };
    /**
     * Quictype's unsupported options
     * These won't be visible or configurable by the user
     */
    unsupportedOptions?: string[];
    /**
     * Modifiers for Functions and Type names.
     */
    nameModifiers?: NameModifiers;
    /**
     * Keys for the Quicktype options that need to be set
     */
    requiredOptions?: string[];
}
/**
 * Creates a LanguageGenerator using Quicktype for the types and Handlebars for templates.
 * @param config a FactoryConfig object
 * @returns a LanguageGenerator object for Typewriter
 */
export declare function createQuicktypeLanguageGenerator<T extends TargetLanguage>(config: FactoryConfig<T>): LanguageGenerator;
export {};
