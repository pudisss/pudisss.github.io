import { Config } from "@oclif/core";
import Analytics from "analytics-node";
import { TokenMethod, WorkspaceConfig } from "../config";
import { Callback, CommandBuildConfig, CommandInitConfig, TrackMessage } from "./segment";
declare const segmentClient: Analytics;
/**
 * Adds the Typewriter CLI app context data to the event
 * @param message event
 * @param config OCLIF Config
 * @returns an event with context filled in
 */
declare const withContext: <P>(message: Omit<TrackMessage<P>, "anonymousId">, config: Config, anonymousId: string) => TrackMessage<P>;
/**
 * Formats the Workspace config into the tracking plan valid command config object
 * @param config OCLIF Config
 * @param tokenMethod Auth Token method used in the command
 * @returns a tracking plan compatible config object
 */
declare const toCommandConfig: (config: WorkspaceConfig, tokenMethod?: TokenMethod) => CommandBuildConfig | CommandInitConfig;
declare const getSegmentClient: (config: Config) => {
    buildCommand: (message: Omit<TrackMessage<import("./segment").CommandBuild>, "anonymousId">, callback?: Callback) => void;
    helpCommand: (message: Omit<TrackMessage<import("./segment").CommandHelp>, "anonymousId">, callback?: Callback) => void;
    initCommand: (message: Omit<TrackMessage<import("./segment").CommandInit>, "anonymousId">, callback?: Callback) => void;
    commandError: (message: Omit<TrackMessage<import("./segment").CommandError>, "anonymousId">, callback?: Callback) => void;
    flush: () => void;
};
export { segmentClient, getSegmentClient, withContext, toCommandConfig };
export * from "./segment";
