import { WorkspaceConfig } from "./schema";
import { SegmentAPI } from "../api";
export declare const CONFIG_NAME = "typewriter.yml";
/**
 * getWorkspaceConfig looks for, and reads, a typewriter.yml configuration file.
 * If it does not exist, it will return undefined. If the configuration
 * if invalid, an Error will be thrown.
 * Note: path is relative to the directory where the typewriter command
 * was run.
 * @param path
 * @returns
 */
export declare function getWorkspaceConfig(path: string): Promise<WorkspaceConfig | undefined>;
/**
 * saveConfig writes a config out to a typewriter.yml file.
 * Note path is relative to the directory where the typewriter command
 * was run.
 * @param config
 * @param path
 */
export declare function saveWorkspaceConfig(config: WorkspaceConfig, path: string): Promise<void>;
/**
 * resolveRelativePath resolves a relative path from the directory of the `typewriter.yml` config
 * file. It supports file and directory paths.
 * @param configPath
 * @param path
 * @param otherPaths
 * @returns
 */
export declare function resolveRelativePath(configPath: string | undefined, path: string, ...otherPaths: string[]): string;
export declare function verifyDirectoryExists(path: string, type?: "directory" | "file"): Promise<void>;
export declare enum TokenMethod {
    Script = "script",
    File = "file",
    Pipe = "pipe"
}
export declare function tokenMethodToUserString(method: TokenMethod, configPath?: string): string;
export declare type TokenMetadata = {
    token?: string;
    method: TokenMethod;
    isValid?: boolean;
    workspace?: SegmentAPI.Workspace;
};
/**
 * getToken uses a Config to fetch a Segment API token. It will search for it in this order:
 *   1. The stdout from executing the optional token script from the config.
 *   2. cat ~/.typewriter
 * Returns undefined if no token can be found
 * @param config
 * @param configPath
 * @returns
 */
export declare function getToken(config: Partial<WorkspaceConfig> | undefined, configPath: string, input?: string): Promise<TokenMetadata | undefined>;
/**
 * Formats a token received through input
 * @param input
 * @returns
 */
export declare function getInputToken(input?: string, validate?: boolean): Promise<TokenMetadata>;
/**
 * Finds if the current workspace has a script to generate a token and retrieves the value.
 * @param config
 * @param configPath
 * @returns
 */
export declare function getScriptToken(config: Partial<WorkspaceConfig> | undefined, configPath: string, validate?: boolean): Promise<TokenMetadata>;
/**
 * Retrieves the token stored in the user file: ~/.typewriter.
 * @param config
 * @param configPath
 * @returns
 */
export declare function getGlobalToken(validate?: boolean): Promise<TokenMetadata>;
/**
 * storeToken writes a token to ~/.typewriter.
 * @param token
 * @returns
 */
export declare function saveGlobalToken(token: string): Promise<void>;
