/**
 * A config, stored in a typewriter.yml file.
 * If you update this inferface, make sure to also update the Joi schema (ConfigSchema) below.
 */
export declare type WorkspaceConfig<T = Record<string, unknown>> = {
    /** A set of optional shell commands to customize typewriter's behavior. */
    scripts?: {
        /**
         * An optional shell command that must produce a Segment API token as its only output.
         */
        token?: string;
        /**
         * An optional shell command executed after typewriter updates/builds clients
         * which can be used for things like applying automatic formatting to generated files.
         */
        after?: string;
    };
    /** Metadata on how to configure a client (language, SDK, module-type, etc.). */
    client: {
        language: string;
        sdk: string;
    } & T;
    /** Which Tracking Plans to sync locally and generate clients for. */
    trackingPlans: TrackingPlanConfig[];
};
/** Metadata on a specific Tracking Plan to generate a client for. */
export declare type TrackingPlanConfig = {
    /**
     * The name of the Tracking Plan. Only set during the `init` step, so it
     * can be added as a comment in the generated `typewriter.yml`.
     */
    name?: string;
    /** The id of the Tracking Plan to generate a client for. */
    id: string;
    /** This is the old ResourceID for Tracking plans in ConfigAPI, we use this for compatibility from v7 to v8 but it is not required*/
    legacyID?: string;
    /**
     * A directory path relative to this typewriter.yml file, specifying where
     * this Tracking Plan's client should be output.
     */
    path: string;
};
export declare const validateConfig: (rawConfig: Record<string, unknown>) => WorkspaceConfig;
