/**
 * Fired when the user generates code with Typewriter
 */
export interface CommandBuild {
    /**
     * Local Workspace configuration
     */
    config: CommandBuildConfig;
    /**
     * Duration of the command in ms
     */
    duration: number;
    /**
     * Runs in a CI environment
     */
    isCI: string;
    /**
     * Build Output mode
     */
    mode: Mode;
    /**
     * Raw command string input
     */
    rawCommand: string;
    /**
     * User Segment Workspace
     */
    workspace: string;
}
/**
 * Local Workspace configuration
 */
export interface CommandBuildConfig {
    /**
     * Language to Generate
     */
    language: string;
    /**
     * Advanced Language Options
     */
    languageOptions?: {
        [key: string]: any;
    };
    /**
     * SDK to generate
     */
    sdk: string;
    /**
     * Type of token retrieval
     */
    tokenType?: TokenType;
    /**
     * Tracking Plans to generate code for
     */
    trackingPlans: PurpleTrackingPlan[];
}
/**
 * Type of token retrieval
 */
export declare enum TokenType {
    Global = "global",
    Input = "input",
    Script = "script"
}
export interface PurpleTrackingPlan {
    /**
     * Tracking Plan ID
     */
    id?: string;
    /**
     * Path to output code
     */
    path?: string;
}
/**
 * Build Output mode
 */
export declare enum Mode {
    Dev = "dev",
    Prod = "prod"
}
export interface CommandError {
    /**
     * Local Workspace configuration
     */
    config?: CommandErrorConfig;
    /**
     * Error Object
     */
    error: {
        [key: string]: any;
    };
    /**
     * Exit code for the error
     */
    errorCode?: number;
    /**
     * User friendly error message
     */
    errorMessage: string;
    /**
     * Runs in a CI environment
     */
    isCI: string;
    /**
     * Raw command string input
     */
    rawCommand: string;
    /**
     * User Segment Workspace
     */
    workspace?: string;
}
/**
 * Local Workspace configuration
 */
export interface CommandErrorConfig {
    /**
     * Language to generate
     */
    language: string;
    /**
     * Advanced Language Options
     */
    languageOptions?: {
        [key: string]: any;
    };
    /**
     * SDK to generate
     */
    sdk: string;
    /**
     * Type of token retrieval
     */
    tokenType?: TokenType;
    /**
     * Tracking Plans to generate code for
     */
    trackingPlans: FluffyTrackingPlan[];
}
export interface FluffyTrackingPlan {
    /**
     * Tracking Plan ID
     */
    id?: string;
    /**
     * Path to output code
     */
    path?: string;
}
export interface CommandHelp {
    /**
     * Raw command string input
     */
    rawCommand: string;
}
/**
 * Init Events that initialize the settings for typewriter
 */
export interface CommandInit {
    /**
     * Local Workspace configuration
     */
    config: CommandInitConfig;
    /**
     * Duration of the command in ms
     */
    duration: number;
    /**
     * Wether there is a workspace config already present
     */
    hasConfig?: boolean;
    /**
     * Raw command string input
     */
    rawCommand: string;
}
/**
 * Local Workspace configuration
 */
export interface CommandInitConfig {
    /**
     * Language to generate
     */
    language: string;
    /**
     * Advanced Language Options
     */
    languageOptions?: {
        [key: string]: any;
    };
    /**
     * SDK to generate
     */
    sdk: string;
    /**
     * Type of token retrieval
     */
    tokenType: TokenType;
    /**
     * Tracking Plans to generate code for
     */
    trackingPlans: TentacledTrackingPlan[];
    /**
     * User Segment Workspace
     */
    workspace: string;
}
export interface TentacledTrackingPlan {
    /**
     * Tracking Plan ID
     */
    id: string;
    /**
     * Path to output code
     */
    path: string;
}
/**
 * KitchenSink Event for testing all possible data types
 */
export interface KitchenSink {
    aBoolean?: boolean;
    aDate?: Date;
    anArray?: any[];
    anEnum?: AnEnum;
    anInteger?: number;
    anObject?: {
        [key: string]: any;
    };
    aNumber?: number;
    anything?: any;
    aString?: string;
}
export declare enum AnEnum {
    Another = "another",
    Value = "value"
}
export interface VersionCommand {
    version: string;
}
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 */
import { ErrorObject } from 'ajv';
import AnalyticsNode from 'analytics-node';
/**
* At least one of userId or anonymousId must be included in any identify call.
*/
declare type Identity = {
    userId: string | number;
} | {
    anonymousId: string | number;
};
/**
 * TrackMessage represents a message payload for an analytics `.track()` call.
 * See: https://segment.com/docs/spec/track/
 */
export declare type TrackMessage<PropertiesType> = Options & Record<string, any> & Identity & {
    /** A dictionary of properties for the event. */
    properties?: PropertiesType;
    /**
    * A Javascript date object representing when the track took place.
    * If the track just happened, leave it out and we’ll use the server’s
    * time. If you’re importing data from the past make sure you to send
    * a timestamp.
    */
    timestamp?: Date;
};
/** The callback exposed by analytics-node. */
export declare type Callback = (err: Error) => void;
/** A dictionary of options. For example, enable or disable specific destinations for the call. */
export interface Options {
    /**
     * Selectivly filter destinations. By default all destinations are enabled.
     * https://segment.com/docs/sources/website/analytics.js/#selecting-destinations
     */
    integrations?: {
        [key: string]: boolean | {
            [key: string]: any;
        };
    };
    /**
     * A dictionary of extra context to attach to the call.
     * https://segment.com/docs/spec/common/#context
     */
    context?: Context;
}
/**
 * Context is a dictionary of extra information that provides useful context about a datapoint.
 * @see {@link https://segment.com/docs/spec/common/#context}
 */
export interface Context extends Record<string, any> {
    active?: boolean;
    app?: {
        name?: string;
        version?: string;
        build?: string;
    };
    campaign?: {
        name?: string;
        source?: string;
        medium?: string;
        term?: string;
        content?: string;
    };
    device?: {
        id?: string;
        manufacturer?: string;
        model?: string;
        name?: string;
        type?: string;
        version?: string;
    };
    ip?: string;
    locale?: string;
    location?: {
        city?: string;
        country?: string;
        latitude?: string;
        longitude?: string;
        region?: string;
        speed?: string;
    };
    network?: {
        bluetooth?: string;
        carrier?: string;
        cellular?: string;
        wifi?: string;
    };
    os?: {
        name?: string;
        version?: string;
    };
    page?: {
        hash?: string;
        path?: string;
        referrer?: string;
        search?: string;
        title?: string;
        url?: string;
    };
    referrer?: {
        type?: string;
        name?: string;
        url?: string;
        link?: string;
    };
    screen?: {
        density?: string;
        height?: string;
        width?: string;
    };
    timezone?: string;
    groupId?: string;
    traits?: Record<string, any>;
    userAgent?: string;
}
export declare type ViolationHandler = (message: TrackMessage<Record<string, any>>, violations: ErrorObject[]) => void;
/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 */
export declare const defaultValidationErrorHandler: ViolationHandler;
/** Options to customize the runtime behavior of a Typewriter client. */
export interface TypewriterOptions {
    /**
     * Underlying analytics instance where analytics calls are forwarded on to.
     */
    analytics: AnalyticsNode;
    /**
     * Handler fired when if an event does not match its spec. This handler
     * does not fire in production mode, because it requires inlining the full
     * JSON Schema spec for each event in your Tracking Plan.
     *
     * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
     * if a message does not match the spec. Otherwise, errors will be logged to stderr.
     */
    onViolation?: ViolationHandler;
}
/**
 * Updates the run-time configuration of this Typewriter client.
 * This function must be called with a configured analytics-node instance before firing
 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {AnalyticsNode} analytics - Underlying analytics instance where analytics
 * 		calls are forwarded on to.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
export declare function setTypewriterOptions(options: TypewriterOptions): void;
/**
 * Fires a 'Command Build' track call.
 * Fired when the user generates code with Typewriter
 *
 * @param {TrackMessage<CommandBuild>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export declare function commandBuild(message: TrackMessage<CommandBuild>, callback?: Callback): void;
/**
 * Fires a 'Command Error' track call.
 *
 *
 * @param {TrackMessage<CommandError>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export declare function commandError(message: TrackMessage<CommandError>, callback?: Callback): void;
/**
 * Fires a 'Command Help' track call.
 *
 *
 * @param {TrackMessage<CommandHelp>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export declare function commandHelp(message: TrackMessage<CommandHelp>, callback?: Callback): void;
/**
 * Fires a 'Command Init' track call.
 * Init Events that initialize the settings for typewriter
 *
 * @param {TrackMessage<CommandInit>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export declare function commandInit(message: TrackMessage<CommandInit>, callback?: Callback): void;
/**
 * Fires a 'KitchenSink' track call.
 * KitchenSink Event for testing all possible data types
 *
 * @param {TrackMessage<KitchenSink>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export declare function kitchenSink(message: TrackMessage<KitchenSink>, callback?: Callback): void;
/**
 * Fires a 'VersionCommand' track call.
 *
 *
 * @param {TrackMessage<VersionCommand>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export declare function versionCommand(message: TrackMessage<VersionCommand>, callback?: Callback): void;
declare const _default: {
    /**
     * Updates the run-time configuration of this Typewriter client.
     * This function must be called with a configured analytics-node instance before firing
     * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
     *
     * @param {TypewriterOptions} options - the options to upsert
     *
     * @typedef {Object} TypewriterOptions
     * @property {AnalyticsNode} analytics - Underlying analytics instance where analytics
     * 		calls are forwarded on to.
     * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
     * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
     * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
     * 		will be logged to stderr.
     */
    setTypewriterOptions: typeof setTypewriterOptions;
    /**
     * Fires a 'Command Build' track call.
     * Fired when the user generates code with Typewriter
     *
     * @param CommandBuild props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    commandBuild: typeof commandBuild;
    /**
     * Fires a 'Command Error' track call.
     *
     *
     * @param CommandError props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    commandError: typeof commandError;
    /**
     * Fires a 'Command Help' track call.
     *
     *
     * @param CommandHelp props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    commandHelp: typeof commandHelp;
    /**
     * Fires a 'Command Init' track call.
     * Init Events that initialize the settings for typewriter
     *
     * @param CommandInit props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    commandInit: typeof commandInit;
    /**
     * Fires a 'KitchenSink' track call.
     * KitchenSink Event for testing all possible data types
     *
     * @param KitchenSink props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    kitchenSink: typeof kitchenSink;
    /**
     * Fires a 'VersionCommand' track call.
     *
     *
     * @param VersionCommand props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    versionCommand: typeof versionCommand;
};
export default _default;
