import { SomeJSONSchema } from "ajv/dist/types/json-schema";
export declare namespace SegmentAPI {
    type Pagination = {
        pagination: {
            current: string;
            next?: string;
            previous?: string;
            totalEntries?: number;
        };
    };
    type GetTrackingPlanResponse = {
        data: {
            trackingPlan: TrackingPlan;
        };
    };
    type GetTrackingPlanRulesResponse = {
        data: {
            rules: RuleMetadata[];
        } & Pagination;
    };
    type ListTrackingPlansResponse = {
        data: {
            trackingPlans: TrackingPlan[];
        } & Pagination;
    };
    type RuleMetadataV1 = {
        name: string;
        description?: string;
        rules: SomeJSONSchema;
        version: number;
    };
    type Events = {
        events: RuleMetadataV1[];
    };
    type TrackingPlanV1 = {
        name: string;
        display_name: string;
        create_time: Date;
        update_time: Date;
        rules?: Events;
    };
    type TrackingPlan = {
        id: string;
        resourceSchemaId?: string;
        name: string;
        slug: string;
        description: string;
        createdAt: Date;
        updatedAt: Date;
        rules?: RuleMetadata[];
    };
    enum RuleType {
        Common = "COMMON",
        Group = "GROUP",
        Identify = "IDENTIFY",
        Page = "PAGE",
        Screen = "SCREEN",
        Track = "TRACK"
    }
    type RuleMetadata = {
        $id?: string;
        key: string;
        type: RuleType;
        description?: string;
        jsonSchema: SomeJSONSchema;
        version: number;
    };
    type WorkspaceResponse = {
        data: {
            workspace: Workspace;
        };
    };
    type Workspace = {
        name: string;
        display_name: string;
        id: string;
        create_time: Date;
    };
}
/**
 * Fetches the complete data for a tracking plan, including the rules
 */
export declare function fetchTrackingPlan(id: string, token: string, skipRules?: boolean): Promise<SegmentAPI.TrackingPlan>;
/**
 * Fetches all Tracking Plans accessible by a given API token
 */
export declare function fetchTrackingPlans(token: string): Promise<SegmentAPI.TrackingPlan[]>;
/**
 * Fetches the workspace data for a given API token
 */
export declare function fetchWorkspace(options: {
    token: string;
}): Promise<SegmentAPI.Workspace>;
export declare type TokenValidationResult = {
    isValid: boolean;
    workspace?: SegmentAPI.Workspace;
};
/**
 * validateToken returns true if a token is a valid Segment API token.
 * Note: results are cached in-memory since it is commonly called multiple times
 * for the same token (f.e. in `config/`).
 */
export declare function validateToken(token: string | undefined): Promise<TokenValidationResult>;
