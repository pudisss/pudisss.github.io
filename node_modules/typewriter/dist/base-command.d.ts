/// <reference types="npmcli__ci-detect" />
import { Command, Config } from "@oclif/core";
import { PromptModule } from "inquirer";
import { SegmentAPI } from "./api";
import { TokenMetadata, WorkspaceConfig } from "./config";
import { getSegmentClient } from "./telemetry";
import ciDetect from "@npmcli/ci-detect";
/**
 * Base Command class.
 *
 * Handles loading the configuration and common flags, also adds support for pipes
 * All commands should extend this class!
 */
export declare abstract class BaseCommand extends Command {
    static examples: string[];
    /**
     * Workspace config data
     */
    workspaceConfig?: WorkspaceConfig;
    /**
     * Show verbose debug messages
     */
    isDebugEnabled: boolean;
    /**
     * Path to the workspace config
     */
    configPath: string;
    /**
     * Segment Public API token
     */
    tokenMetadata?: TokenMetadata;
    /**
     * Piped input
     */
    pipedInput?: string;
    /**
     * A module of inquirer.js that is pipe friendly
     */
    prompt: PromptModule;
    segmentClient: ReturnType<typeof getSegmentClient>;
    isCI?: ReturnType<typeof ciDetect>;
    private hasConfigUpdates;
    get apiToken(): string | undefined;
    get workspace(): SegmentAPI.Workspace | undefined;
    get rawCommand(): string;
    static flags: {
        config: import("@oclif/core/lib/interfaces").OptionFlag<string>;
        debug: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    constructor(argv: string[], config: Config);
    protected catch(err: Error & {
        exitCode?: number | undefined;
    }): Promise<any>;
    protected init(): Promise<any>;
    protected finally(error: Error | undefined): Promise<any>;
}
